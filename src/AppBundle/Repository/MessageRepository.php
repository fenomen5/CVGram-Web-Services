<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Message;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get user messages grouped into threads
     * @param $userId
     * @return Message[]|array
     */
    public function getUserThreads($userId)
    {
        /** @var Message[] $messages */
        $messages = $this->createQueryBuilder('msg')
            ->select('IDENTITY(msg.sentFrom) as sentFrom, IDENTITY(msg.sentTo) as sentTo, 
            sender.firstName as senderName, receiver.firstName as receiverName, count(msg.id) as counter, max(msg.sentAt) as lastDate')
            ->leftJoin('msg.sentFrom', 'sender')
            ->leftJoin('msg.sentTo', 'receiver')
            ->where('msg.sentFrom = :userId')
            ->orWhere('msg.sentTo = :userId')
            ->groupBy('msg.sentFrom,msg.sentTo')
            ->orderBy('msg.sentAt','desc')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->getResult();


        if (count($messages)) {
            foreach ($messages as $key => $message) {
                if ($message['sentFrom'] == $userId ) {
                    for ($i=0; $i< count($messages); $i++)
                    {
                        if ($message['sentTo'] == $messages[$i]['sentFrom'] &&
                            $message['sentFrom'] == $messages[$i]['sentTo']) {
                            $messages[$key]['counter'] += $messages[$i]['counter'];
                            $messages[$i]['counter'] = 0;
                            break;
                        }
                    }
                }
            }
            foreach ($messages as $key => $message) {
                if ($message['counter'] == 0 )
                {
                    unset($messages[$key]);
                }
            }
        }

        if (empty($messages)) {
            return [];
        }

        return $messages;
    }

    public function getUserThread($userId, $receiverId)
    {
        /** @var Message[] $messages */
        $messages = $this->createQueryBuilder('msg')
            ->select('msg.id, IDENTITY(msg.sentFrom) as sentFrom, IDENTITY(msg.sentTo) as sentTo, 
            sender.firstName as senderName, receiver.firstName as receiverName, msg.sentAt as date,
            msg.body')
            ->leftJoin('msg.sentFrom', 'sender')
            ->leftJoin('msg.sentTo', 'receiver')
            ->where('msg.sentFrom = :userId')
            ->andWhere('msg.sentTo = :receiverId')
            ->orWhere('msg.sentTo = :userId AND msg.sentFrom = :receiverId')
            ->orderBy('msg.sentAt','desc')
            ->setParameter('userId', $userId)
            ->setParameter('receiverId', $receiverId)
            ->getQuery()
            ->getResult();

        if (empty($messages)) {
            return [];
        }

        return $messages;
    }

    /**
     * Get user message
     * @param $userId
     * @param $messageId
     * @return Message[]|array
     */
    public function getUserMessage($userId, $messageId)
    {
        /** @var Message[] $messages */
        $messages = $this->createQueryBuilder('msg')
            ->select('IDENTITY(msg.sentFrom) as sentFrom, IDENTITY(msg.sentTo) as sentTo, 
            sender.firstName as senderName, receiver.firstName as receiverName, msg.sentAt as date,
            msg.body')
            ->leftJoin('msg.sentFrom', 'sender')
            ->leftJoin('msg.sentTo', 'receiver')
            ->where ('msg.id = :messageId')
            ->andWhere('msg.sentFrom = :userId')
            ->orWhere('msg.sentTo = :userId')
            ->orderBy('msg.sentAt','desc')
            ->setParameter('userId', $userId)
            ->setParameter('messageId', $messageId)
            ->getQuery()
            ->getResult();

        if (empty($messages)) {
            return false;
        }

        return $messages[0];
    }
}
